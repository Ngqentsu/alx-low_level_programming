#include "lists.h"
#include <stdio.h>

size_t looped_listint_len(const listint_t *head);
size_t print_listint_safe(const listint_t *head);

/**
 * looped_listint_len - Counts the number of unique nodes
 * in a looped listint_t linked list.
 * @head: A pointer to the head of the listint_t to check.
 * Return: If the list is not looped - 0.
 * Otherwise - the number of unique nodes in the list.
 */
size_t looped_listint_len(const listint_t *head)
{
const listint_t *skyhawk, *raptor;
size_t nodes = 1;

if (head == NULL || (*head).next == NULL)
return (0);

skyhawk = (*head).next;
raptor = (*(head->next)).next;

while (raptor)
{
if (skyhawk == raptor)
{
skyhawk = head;
while (skyhawk != raptor)
{
nodes++;
skyhawk = (*skyhawk).next;
raptor = (*raptor).next;
}

skyhawk = (*skyhawk).next;
while (skyhawk != raptor)
{
nodes++;
skyhawk = (*skyhawk).next;
}
return (nodes);

skyhawk = (*skyhawk).next;
raptor = ((*raptor).next)->next;
}
return (0);
}

/**
 * print_listint_safe - Prints a listint_t list safely.
 * @head: A pointer to the head of the listint_t list.
 * Return: The number of nodes in the list.
 */
size_t print_listint_safe(const listint_t *head)
{
size_t nodes, i = 0;

nodes = looped_listint_len(head);

if (nodes == 0)
{
for (; head != NULL; nodes++)
{
printf("[%p] %d\n", (void *)head, (*head).n);
head = (*head).next;
}
}

else
{
for (i = 0; i < nodes; i++)
{
printf("[%p] %d\n", (void *)head, (*head).n);
head = (*head).next;
}
printf("-> [%p] %d\n", (void *)head, head->n);
}
return (nodes);
}
